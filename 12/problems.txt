Write a C program, that synchronizes 2 related processes via signals. Both processes write text on the standard output in the following order - the first one, then the second one and then the first one again. The first process waits a few seconds before writing.
Write a C program, that synchronizes 2 related processes via a message queue. Both processes write text on the standard output in the following order - the first one, then the second one and then the first one again. The first process waits a few seconds before writing.
Write a C program, that creates a shared memory segment of size int, initializes it with 0 and starts a process. Both processes, simoltaneously, throughout the same period of time (5 seconds for example) change the number, as 1 process increments it and another decrements it. Finally, both processes print it out.
*Write a C program, that implements the "readers-writers" example via semaphores. The parent is a writer while its descendants (>=2) are readers. The parent periodically writes different texts in a file. It opens the file (with O_CREAT and O_TRUNC), waits a few seconds and writes. The descendants, through several seconds, read out the contents of the file and print it out on the standard output, along with their pid.
